<?xml version="1.0" encoding="utf-8"?>
<doc>
    <package name="react">
        <module name="Getting Started">
            <code lang="sh">
                npm install --save-prod @eviljs/react
            </code>
        </module>

        <module name="auth.ts">
            <text>
                <code-inline>Auth.ts</code-inline> module provides a ready to use authentication API.
            </text>

            <symbol name="WithAuth()">
                <code lang="ts">
                    <![CDATA[
                    import {createCookie} from '@eviljs/web/cookie'
                    import {createFetch} from '@eviljs/web/fetch'

                    function App(props) {
                        return 'App Entry Point'
                    }

                    const app = WithAuth(App, fetch, cookie)

                    render(<app/>, document.text)
                    ]]>
                </code>
                <text>
                    Authentication strategy can be customized.
                </text>
                <code lang="ts">
                    <![CDATA[
                    const authOptions = {
                        authenticate: {
                            url: '/auth',
                            options: {
                                credentials: 'same-origin',
                            },
                            requestBody(credentials) {
                                const {identifier, secret} = credentials
                                return {identifier, password: secret}
                            },
                            responseToken(text) {
                                return text.jwt
                            },
                        },
                        validate: {
                            url: '/session',
                            options(token) {
                                return asAuthOptions(token)
                            },
                        },
                        invalidate: {
                            method: 'post',
                            url: '/logout',
                            options(token) {
                                return asAuthOptions(token)
                            },
                        },
                    }
                    const app = WithAuth(App, fetch, cookie, authOptions)
                    ]]>
                </code>
            </symbol>

            <symbol name="useAuth()">
                <code lang="ts">
                    <![CDATA[
                    import {useAuth} from '@eviljs/react/auth'

                    export function MyComponent(props) {
                        const {
                            token,
                            storedToken,
                            tokenState,
                            isAuthenticated,
                            pending,
                            authenticate,
                            destroySession,
                        } = useAuth()
                    }
                    ]]>
                </code>
                <text>
                    <code-inline>token</code-inline> prop contains <code lang="ts">null</code> when the token stored on
                    the client has not been validated yet, and the token string after the token has been validated.
                </text>
                <code lang="ts">
                    <![CDATA[
                    import {useAuth} from '@eviljs/react/auth'

                    export function MyComponent(props) {
                        const {token} = useAuth()

                        useEffect(() => {
                            if (! token) {
                                return
                            }

                            // The token can be used for calling an API, for example.
                            fetch('/data.json', {headers: {
                                Authorization: `Bearer ${token}`,
                            }})
                        }, [token])
                    }
                    ]]>
                </code>
                <text>
                    <code-inline>storedToken</code-inline> prop contains the token stored on the client, valid or not.
                </text>
                <code lang="ts">
                    <![CDATA[
                    import {useAuth} from '@eviljs/react/auth'

                    export function MyComponent(props) {
                        const {storedToken} = useAuth()

                        useEffect(() => {
                            console.log(storedToken)
                        }, [storedToken])
                    }
                    ]]>
                </code>
                <text>
                    <code-inline>tokenState</code-inline> prop contains the token state and is updated to reflect its
                    lifecycle.
                </text>
                <code lang="ts">
                    <![CDATA[
                    import {AuthTokenState, useAuth} from '@eviljs/react/auth'

                    export function MyComponent(props) {
                        const {tokenState} = useAuth()

                        switch (tokenState) {
                            case AuthTokenState.Init: {
                                return 'Token has an initial undefined state'
                            }
                            case AuthTokenState.Missing: {
                                return 'There is no token stored on the client'
                            }
                            case AuthTokenState.Validating: {
                                return 'Please wait, we are checking the token validity with the server'
                            }
                            case AuthTokenState.Valid: {
                                return 'Great, server told that the token is valid'
                            }
                            case AuthTokenState.Invalid: {
                                return 'Ops, the token seams to be expired'
                            }
                        }
                    }
                    ]]>
                </code>
            </symbol>
        </module>

        <module name="container.ts">
        </module>
    </package>

    <package name="reactx">
    </package>
</doc>
